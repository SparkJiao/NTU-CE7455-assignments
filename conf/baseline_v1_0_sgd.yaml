hydra:
  run:
    dir: ./

train_file: ./imdb/train.bin
dev_file: ./imdb/val.bin
test_file: ./imdb/test.bin

# Model
model:
  _target_: models.model.TextClassifier
  encoder:
    _target_: models.model.RNNEncoder
    mode: rnn
    input_size: 100
    hidden_size: 256
    num_layers: 1
    dropout: 0.0
    bidirectional: False
  vocab_file: ./imdb/vocab.json
  embedding_dim: 100
  output_dim: 3
  pretrained_embedding:

# Data loading
read_tensor:
  _target_: data.imdb.TextDataset
  vocab_file: ${model.vocab_file}
  max_seq_length: -1

extended_vocab:

# Data collator
collator:
  _target_: data.imdb.TextCollator
  vocab_file: ${model.vocab_file}


# Dataloader
num_workers: 4
prefetch_factor: 2

# Wiki path pretrain v8.2
model_name_or_path:
pretrain:

output_dir: experiments/imdb_cls.rnn-uni-1.w1.A40.sgd.v1.0.s${seed}

do_train: True
evaluate_during_training: True

do_eval: True
eval_sub_path:

optimizer: sgd

# Training hyper-parameters
per_gpu_train_batch_size: 64
per_gpu_eval_batch_size: 128
learning_rate: 1e-3
lr_scheduler: constant
gradient_accumulation_steps: 1
weight_decay: 0.0
adam_epsilon: 1e-6
adam_betas: "(0.9, 0.98)"
#adam_betas: "(0.9, 0.999)"
max_grad_norm: 0.0
#max_grad_norm: 1.0
num_train_epochs: 20
max_steps: 0
warmup_proportion: 0
warmup_steps: 0


logging_steps: 5
save_steps: -1
save_best: True
eval_steps: 500
ddp_eval: True
no_cuda: False
seed: 42
local_rank: -1
fp16: True
fp16_opt_level: O1

# Prediction config
exp_name: imdb_cls.rnn-uni-1.w1.A40.v1.0.s${seed}
exp_notes:
prediction_cfg:
  metric: "acc"
  measure: 1
  best_checkpoint:
  best_result:
eval_forward_fn:
  _target_: general_util.evaluator.DiscriminatorForwardFn
post_process:

# fairscale.FullyShardedDP
fairscale_config:
  _target_: general_util.fsdp_utils.default_initialize
  fp16: ${fp16}
  reshard_after_forward: False
  move_grads_to_cpu: False
  move_params_to_cpu: False

summary_helper:
  _target_: general_util.tensorboard_helper.WandbWriter
  batch_index_or_keys:
  outputs_index_or_keys:

# Temporary variables
n_gpu:
device:
train_batch_size:
eval_batch_size:
world_size:
